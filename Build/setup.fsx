#r "paket:
nuget Fake.Core.Environment prerelease
nuget Fake.Core.Process prerelease
nuget Fake.DotNet.Cli prerelease
nuget Fake.DotNet.NuGet prerelease
nuget Fake.IO.FileSystem prerelease
nuget coveralls.io >= 1.4.2
nuget FSharpLint.Core >= 0.9.0
nuget NUnit >= 3.9.0
nuget YamlDotNet >= 4.3.0 //"
open System
open System.IO

open Fake.DotNet
open Fake.DotNet.NuGet.Restore
open Fake.IO

open Microsoft.Win32

// Really bootstrap
let dotnetPath = "dotnet" |> Fake.Core.Process.tryFindFileOnPath
let dotnetOptions (o:DotNet.Options) = match dotnetPath with
                                       | Some f -> {o with DotNetCliPath = f}
                                       | None -> o

DotNet.restore (fun o -> { o with
                            Packages = ["./packages"]
                            Common = dotnetOptions o.Common}) "./Build/dotnet-nuget.fsproj"

// Restore the NuGet packages used by the build and the Framework version
RestoreMSSolutionPackages id "./AltCover.sln"
try
  Shell.cd "./Demo/Service"
  RestoreMSSolutionPackages id "./AltCover.Test.Service.sln"
finally
  Shell.cd "../.."

let build = """// generated by dotnet fake run .\Build\setup.fsx
#r "paket:
nuget Fake.Core.Target prerelease
nuget Fake.Core.Environment prerelease
nuget Fake.Core.Process prerelease
nuget Fake.DotNet.AssemblyInfoFile prerelease
nuget Fake.DotNet.Cli prerelease
nuget Fake.DotNet.MSBuild prerelease
nuget Fake.DotNet.NuGet prerelease
nuget Fake.DotNet.Testing.NUnit prerelease
nuget Fake.DotNet.Testing.OpenCover prerelease
nuget Fake.DotNet.Testing.XUnit2 prerelease
nuget Fake.IO.FileSystem prerelease
nuget Fake.Testing.ReportGenerator prerelease
nuget coveralls.io >= 1.4.2
nuget FSharpLint.Core >= 0.9.0
nuget Markdown >= 2.2.1
nuget NUnit >= 3.9.0
nuget YamlDotNet >= 4.3.0 //"

#r "System.IO.Compression.FileSystem.dll"
#r "System.Xml"
#r "System.Xml.Linq"

#load "actions.fsx"
#load "targets.fsx"
#nowarn "988"
do
  ()
"""

File.WriteAllText("./Build/build.fsx", build)